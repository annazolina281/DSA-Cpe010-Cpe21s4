#include <iostream>
using namespace std;

class CircularQueue {
private:
    int* arr;
    int front, rear, size, capacity;

public:
    CircularQueue(int cap) : capacity(cap), front(0), rear(-1), size(0) {
        arr = new int[capacity];
    }

    ~CircularQueue() { delete[] arr; }

    void enqueue(int value) {
        if (size == capacity) {
            cout << "Queue is full!" << endl;
            return;
        }
        rear = (rear + 1) % capacity;
        arr[rear] = value;
        size++;
        cout << value << " enqueued." << endl;
    }

    void dequeue() {
        if (size == 0) {
            cout << "Queue is empty!" << endl;
            return;
        }
        cout << arr[front] << " dequeued." << endl;
        front = (front + 1) % capacity;
        size--;
    }

    int peek() const { return size == 0 ? -1 : arr[front]; }

    void display() const {
        if (size == 0) {
            cout << "Queue is empty!" << endl;
            return;
        }
        cout << "Queue: ";
        for (int i = 0; i < size; i++)
            cout << arr[(front + i) % capacity] << " ";
        cout << endl;
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10); q.enqueue(20); q.enqueue(30);
    q.display();

    q.dequeue(); q.display();
    
    q.enqueue(40); q.enqueue(50); q.enqueue(60);
    q.display();

    return 0;
}
