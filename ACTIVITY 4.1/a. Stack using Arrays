#include <iostream>
#include <string>

#define MAX 100

class ArrayStack {
    char arr[MAX];
    int top;

public:
    ArrayStack() : top(-1) {}

    void push(char c) { if (top < MAX - 1) arr[++top] = c; } // Pushes if space available

    char pop() { return top >= 0 ? arr[top--] : '\0'; } // Pops if non-empty, otherwise returns '\0'

    bool isEmpty() { return top == -1; } // Check if stack is empty
};

bool isBalanced(const std::string &expr) {
    ArrayStack stack;
    for (char c : expr) {
        if (c == '(' || c == '{' || c == '[') stack.push(c); // Push opening brackets
        else if (c == ')' || c == '}' || c == ']') {
            char topChar = stack.pop();
            if (topChar == '\0' || (c == ')' && topChar != '(') || (c == '}' && topChar != '{') || (c == ']' && topChar != '['))
                return false; // Unmatched or mismatched symbols
        }
    }
    return stack.isEmpty(); // Return true if stack is empty
}

int main() {
    std::string expressions[] = {"(A+B)+(C-D)", "((A+B)+(C-D)", "((A+B)+[C-D])", "((A+B]+[C-D]}"};
    for (const auto &expr : expressions)
        std::cout << expr << " is " << (isBalanced(expr) ? "Valid" : "Invalid") << std::endl;
    return 0;
}
