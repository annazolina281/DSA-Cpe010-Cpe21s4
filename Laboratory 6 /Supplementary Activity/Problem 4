#include <iostream>
using namespace std;

// Recursive function for binary search
int recursiveBinarySearch(int arr[], int left, int right, int key) {
    // Base case: if the left index exceeds the right, key is not found
    if (left > right) {
        return -1; // Key not found
    }

    // Calculate the middle index
    int mid = left + (right - left) / 2;

    // Check if the key is present at mid
    if (arr[mid] == key) {
        return mid; // Key found at index mid
    }

    // If key is smaller than mid, search in the left subarray
    if (arr[mid] > key) {
        return recursiveBinarySearch(arr, left, mid - 1, key);
    }

    // If key is greater than mid, search in the right subarray
    return recursiveBinarySearch(arr, mid + 1, right, key);
}

int main() {
    int arr[] = {3, 5, 6, 8, 11, 12, 14, 15, 17, 18}; // Sorted array
    int size = sizeof(arr) / sizeof(arr[0]); // Calculate the size of the array
    int key = 8; // Key to search for

    // Call the recursive binary search function
    int result = recursiveBinarySearch(arr, 0, size - 1, key);

    // Output the result
    if (result != -1) {
        cout << "Key " << key << " found at index " << result << "." << endl;
    } else {
        cout << "Key " << key << " not found." << endl;
    }

    return 0; // Return 0 to indicate successful execution
}

